package com.sd.kafka.streams.ml.models;

/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2018-03-21T14:08:51.986+05:30
  3.18.0.4
  
  Standalone prediction code with sample test data for GBMModel named gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.164.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.164.1:54321/3/Models.java/gbm-2098b885-7850-498e-b4f2-e9cf1d931ddb > gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_text_sentiment_pojo", algorithm="gbm")
public class gbm_text_sentiment_pojo extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 1; }
  public int nclasses() { return 1; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* query */ gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_ColInfo_0.VALUES,
    /* score */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {1.0};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {1.0};

  public gbm_text_sentiment_pojo() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-4047406874208587256L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_0.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_1.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_2.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_3.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_4.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_5.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_6.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_7.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_8.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_9.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_10.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_11.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_12.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_13.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_14.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_15.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_16.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_17.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_18.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_19.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_20.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_21.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_22.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_23.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_24.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_25.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_26.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_27.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_28.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_29.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_30.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_31.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_32.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_33.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_34.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_35.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_36.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_37.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_38.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_39.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_40.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_41.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_42.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_43.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_44.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_45.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_46.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_47.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_48.score0(data,preds);
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_49.score0(data,preds);
    preds[0] += 2.0160965794768613;
    preds[0] = preds[0];
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb implements java.io.Serializable {
  public static final String[] VALUES = new String[1];
  static {
    NamesHolder_gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "query";
    }
  }
}
// The class representing column query
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[81];
  static {
    gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_ColInfo_0_0.fill(VALUES);
  }
  static final class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "\"\"booz allen";
      sa[1] = "\"\"naive bayes";
      sa[2] = "\"\"night at the museum";
      sa[3] = "\"\"twitter api";
      sa[4] = "40d";
      sa[5] = "50d";
      sa[6] = "Bobby Flay";
      sa[7] = "Danny Gokey";
      sa[8] = "Malcolm Gladwell";
      sa[9] = "aapl";
      sa[10] = "aig";
      sa[11] = "at&t";
      sa[12] = "bailout";
      sa[13] = "baseball";
      sa[14] = "bing";
      sa[15] = "car warranty call";
      sa[16] = "cheney";
      sa[17] = "china";
      sa[18] = "comcast";
      sa[19] = "dentist";
      sa[20] = "driving";
      sa[21] = "east palo alto";
      sa[22] = "eating";
      sa[23] = "espn";
      sa[24] = "exam";
      sa[25] = "federer";
      sa[26] = "fred wilson";
      sa[27] = "fredwilson";
      sa[28] = "g2";
      sa[29] = "gm";
      sa[30] = "goodby silverstein";
      sa[31] = "google";
      sa[32] = "googleio";
      sa[33] = "hitler";
      sa[34] = "india election";
      sa[35] = "indian election";
      sa[36] = "insects";
      sa[37] = "iphone app";
      sa[38] = "iran";
      sa[39] = "itchy";
      sa[40] = "jquery";
      sa[41] = "jquery book";
      sa[42] = "kindle2";
      sa[43] = "lakers";
      sa[44] = "lambda calculus";
      sa[45] = "latex";
      sa[46] = "lebron";
      sa[47] = "lyx";
      sa[48] = "mashable";
      sa[49] = "mcdonalds";
      sa[50] = "nike";
      sa[51] = "north korea";
      sa[52] = "notre dame school";
      sa[53] = "obama";
      sa[54] = "pelosi";
      sa[55] = "republican";
      sa[56] = "safeway";
      sa[57] = "san francisco";
      sa[58] = "scrapbooking";
      sa[59] = "shoreline amphitheatre";
      sa[60] = "sleep";
      sa[61] = "sony";
      sa[62] = "stanford";
      sa[63] = "star trek";
      sa[64] = "summize";
      sa[65] = "surgery";
      sa[66] = "time warner";
      sa[67] = "twitter";
      sa[68] = "twitter api";
      sa[69] = "viral marketing";
      sa[70] = "visa";
      sa[71] = "visa card";
      sa[72] = "warren buffet";
      sa[73] = "wave sandbox";
      sa[74] = "weka";
      sa[75] = "wieden";
      sa[76] = "wolfram alpha";
      sa[77] = "world cup";
      sa[78] = "world cup 2010";
      sa[79] = "yahoo";
      sa[80] = "yankees";
    }
  }
}

class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_0_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.20160966f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.19018109f : 
                        -0.17494299f)) : 
                -0.14706421f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.093917355f : 
                    -0.071174875f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.046054102f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.037973296f : 
                        -0.03160966f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -0.001609658f : 
                    0.023390342f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.051331516f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.06897858f : 
                        0.07616812f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.10239034f : 
                        0.113774955f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.13172367f : 
                        0.14575876f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                    0.165057f : 
                    0.19839033f))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 80, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 16, 0, 0, -128, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011110 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, 123, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000001 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, -128, 0, 0, 4, 0, 40, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111011 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -33, -1, 1};
  // {00000000 10000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, -128, 0, 0, 0, 0, 0, 0, 0};
  // {11110101 11111111 11111111 10111111 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-81, -1, -1, -3, -1, -71, -51, 63, -1, -4, 1};
  // {00000010 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, 0, 0, 4, 50, -128, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 10000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0};
  // {00000010 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-33, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_1_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.1814487f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.17116298f : 
                        -0.1574487f)) : 
                -0.13235779f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.084525615f : 
                    -0.06405739f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.04144869f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.034175966f : 
                        -0.028448695f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -0.0014487028f : 
                    0.021051312f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.046198364f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.062080722f : 
                        0.06855131f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.08815131f : 
                        0.097167686f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.11627706f : 
                        0.13118288f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                    0.14855132f : 
                    0.17855132f))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 80, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 16, 0, 0, -128, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011110 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, 123, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000001 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, -128, 0, 0, 4, 0, 40, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111011 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -33, -1, 1};
  // {00000000 10000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, -128, 0, 0, 0, 0, 0, 0, 0};
  // {11110101 11111111 11111111 10111111 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-81, -1, -1, -3, -1, -71, -51, 63, -1, -4, 1};
  // {11110111 11111111 11111111 10111111 11111111 10111101 11111111 11111101 11111111 10111111 1}
  public static final byte[] GRPSPLIT15 = new byte[] {-17, -1, -1, -3, -1, -67, -1, -65, -1, -3, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-33, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_2_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.16330382f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.15404668f : 
                        -0.14170383f)) : 
                -0.119122f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.07607306f : 
                    -0.057651654f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.037303817f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.030758368f : 
                        -0.025603823f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -0.0013038397f : 
                    0.021253595f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.043809764f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.054533113f : 
                        0.059985608f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.07933619f : 
                        0.08745091f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.104649365f : 
                        0.11806458f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                    0.13369618f : 
                    0.16069618f))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 80, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 16, 0, 0, -128, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011110 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, 123, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000001 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, -128, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 32, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -1, -1, 1};
  // {00100000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0};
  // {11110101 11111111 11111111 10111111 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-81, -1, -1, -3, -1, -71, -51, 63, -1, -4, 1};
  // {11110111 11111111 11111111 10111111 11111111 10111101 11111111 11111101 11111111 10111111 1}
  public static final byte[] GRPSPLIT15 = new byte[] {-17, -1, -1, -3, -1, -67, -1, -65, -1, -3, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-33, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_3_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.14697345f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.13864201f : 
                        -0.12753345f)) : 
                -0.107209794f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.06846575f : 
                    -0.051886488f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.03357344f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.02768253f : 
                        -0.023043446f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -0.0011734485f : 
                    0.016820813f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.03752927f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.049079813f : 
                        0.053987045f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.074511744f : 
                        0.082818426f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.09645868f : 
                        0.10711879f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                    0.12289069f : 
                    0.14462654f))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 80, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 16, 0, 0, -128, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011110 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, 123, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000001 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, -128, 0, 0, 4, 0, 40, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111011 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -33, -1, 1};
  // {00100000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0};
  // {11110101 11111111 11111111 10111111 01111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-81, -1, -1, -3, -2, -71, -51, 63, -1, -4, 1};
  // {00000010 00000000 00000000 00000000 10000000 00100000 01001100 00000001 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, 0, 1, 4, 50, -128, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 10000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 10110111 11111110 11111111 11111111 1}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -1, -1, -1, -1, -1, -19, 127, -1, -1, 1};
  // {11111011 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-33, -1, -1, -65, -1, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_4_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.13227609f : 
                        -0.124777816f) : 
                    -0.11384364f) : 
                -0.09389141f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.061619177f : 
                    -0.046697848f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.0302161f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.024914276f : 
                        -0.020739106f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -0.001056099f : 
                    0.01695309f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.037076544f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.045887157f : 
                        0.050932012f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.063951395f : 
                        0.070772305f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.085013f : 
                        0.09554624f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                    0.10847562f : 
                    0.13016388f))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 16, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 16, 0, 0, -128, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011110 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, 123, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000001 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, -128, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 32, 0, 0};
  // {00100000 10000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 1, 0, -128, 0, 0, 0, 0, 0, 0, 0};
  // {11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {11110101 11111111 11111111 10111111 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-81, -1, -1, -3, -1, -71, -51, 63, -1, -4, 1};
  // {11110111 11111111 11111111 10111111 11111111 10111101 11111111 11111101 11111111 10111111 1}
  public static final byte[] GRPSPLIT15 = new byte[] {-17, -1, -1, -3, -1, -67, -1, -65, -1, -3, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-33, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_5_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.11904849f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.11230004f : 
                        -0.10339574f)) : 
                -0.08679737f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.055457264f : 
                    -0.042028062f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.027194489f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.022422848f : 
                        -0.0186652f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -9.5047953E-4f : 
                    0.015257791f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.03196823f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.039702125f : 
                        0.043889266f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.05755625f : 
                        0.06563189f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.078311525f : 
                        0.086701944f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                    0.09975404f : 
                    0.11714749f))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 80, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 16, 0, 0, -128, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011110 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, 123, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000001 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, -128, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 32, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -1, -1, 1};
  // {00100000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0};
  // {11110101 11111111 11111111 10111111 01111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-81, -1, -1, -3, -2, -71, -51, 63, -1, -4, 1};
  // {00000010 00000000 00000000 00000000 10000000 00100000 01001100 00000001 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, 0, 1, 4, 50, -128, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 10000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 1, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 10110111 11111110 11111111 11111111 1}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -1, -1, -1, -1, -1, -19, 127, -1, -1, 1};
  // {11111011 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-33, -1, -1, -65, -1, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_6_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.10714364f : 
                        -0.10107003f) : 
                    -0.09253467f) : 
                -0.07582254f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.049911536f : 
                    -0.037825257f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.024475038f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.02018057f : 
                        -0.016798679f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -8.55422E-4f : 
                    0.011917639f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.027413562f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.03611603f : 
                        0.04170577f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.05180063f : 
                        0.05713188f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.0691216f : 
                        0.077321425f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                    0.088015206f : 
                    0.10543275f))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 16, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 16, 0, 0, -128, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011110 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, 123, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000001 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, -128, 0, 0, 4, 0, 40, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111011 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -33, -1, 1};
  // {00000000 10000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 1, 0, -128, 0, 0, 0, 0, 0, 0, 0};
  // {11110101 11111111 11111111 10111111 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-81, -1, -1, -3, -1, -71, -51, 63, -1, -4, 1};
  // {11110111 11111111 11111111 10111111 11111111 10111101 11111111 11111101 11111111 10111111 1}
  public static final byte[] GRPSPLIT15 = new byte[] {-17, -1, -1, -3, -1, -67, -1, -65, -1, -3, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-33, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_7_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.09642927f : 
                        -0.09096303f) : 
                    -0.0832812f) : 
                -0.068240285f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.04492039f : 
                    -0.03404273f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.022027543f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.018162513f : 
                        -0.015118808f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -7.6987746E-4f : 
                    0.01072588f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.0246722f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.03181286f : 
                        0.033297893f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.045869775f : 
                        0.051418703f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.06220944f : 
                        0.06958927f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                    0.07921367f : 
                    0.09488948f))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 16, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 16, 0, 0, -128, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111011 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -33, -1, 1};
  // {00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11110101 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-81, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000010 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-33, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_8_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.086786345f : 
                        -0.08186673f) : 
                    -0.07495309f) : 
                -0.061416253f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.040428344f : 
                    -0.030638464f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.019824794f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.01634626f : 
                        -0.013606922f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -6.9289206E-4f : 
                    0.010766644f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.023562832f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.02863157f : 
                        0.029968116f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.04128279f : 
                        0.046276826f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.0559885f : 
                        0.063104406f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                    0.073055744f : 
                    0.08540054f))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 16, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 16, 0, 0, -128, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 32, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -1, -1, 1};
  // {00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11110101 11111111 11111111 10111110 01111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-81, -1, -1, 125, -2, -71, -51, 63, -1, -4, 1};
  // {11110111 11111111 11111111 10111110 11111111 10111101 11111111 11111101 11111111 10111111 1}
  public static final byte[] GRPSPLIT15 = new byte[] {-17, -1, -1, 125, -1, -67, -1, -65, -1, -3, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000 10000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 0, 0, 0, 1, 4, 32, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-33, -1, -1, -65, -1, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_9_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.078107715f : 
                    -0.07368006f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                    -0.06745777f : 
                    -0.057872027f)) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.044914316f : 
                    -0.028092027f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.017842319f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.014711644f : 
                        -0.0122462325f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -6.2360766E-4f : 
                    0.009689969f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.021928748f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.026971314f : 
                        0.030452076f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.03941439f : 
                        0.043975484f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.052872792f : 
                        0.05761483f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                    0.06575017f : 
                    0.07686047f))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00010000 00000000 00000100 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 8, 0, 32, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -17, -1, -5, 1};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011110 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, 123, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000001 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, -128, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 32, 0, 0};
  // {00100000 10000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 1, 0, -128, 0, 0, 0, 0, 0, 0, 0};
  // {11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {11110101 11111111 11111111 10111111 01111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-81, -1, -1, -3, -2, -71, -51, 63, -1, -4, 1};
  // {00000010 00000000 00000000 00000000 10000000 00100000 01001100 00000001 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, 0, 1, 4, 50, -128, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 10000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0};
  // {00000010 00000000 00000000 00000000 10000000 00100000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-33, -1, -1, -65, -1, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_10_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.07029694f : 
                    -0.06631205f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                    -0.060711995f : 
                    -0.052084822f)) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.04042288f : 
                    -0.026136817f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.017510284f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.013240477f : 
                        -0.011021606f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -5.6123734E-4f : 
                    0.007607603f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.018023964f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.023106746f : 
                        0.02427418f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.033543255f : 
                        0.03744286f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.04541183f : 
                        0.05069568f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                    0.05791413f : 
                    0.06917443f))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00010000 00000000 00000100 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 8, 0, 32, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11101111 01111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -2, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111011 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -33, -1, 1};
  // {00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11110101 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-81, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000010 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {64, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-33, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_11_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.063267246f : 
                    -0.059680842f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                    -0.0546408f : 
                    -0.04687634f)) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.036380585f : 
                    -0.02284167f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.0143070575f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.011916433f : 
                        -0.009919444f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -5.051136E-4f : 
                    0.007712188f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.017211264f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.020796064f : 
                        0.021846768f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.030188922f : 
                        0.03369857f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.040870644f : 
                        0.044960964f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 81, 0, data[0])) ? 
                        0.048398748f : 
                        0.053383753f) : 
                    0.06225698f))));
    return pred;
  } // constant pool size = 322B, number of visited nodes = 20, static init size = 1440B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00010000 00000000 00000100 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 8, 0, 32, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -17, -1, -5, 1};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 32, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -1, -1, 1};
  // {00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11110111 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-17, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111001 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-97, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
  // {00000100 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT19 = new byte[] {32, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_12_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.056940526f : 
                    -0.05371276f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                    -0.049176723f : 
                    -0.04218871f)) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.032742534f : 
                    -0.02123896f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.014115183f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.010724794f : 
                        -0.008927506f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -4.545927E-4f : 
                    0.0074812565f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.016676398f : 
                    0.019634089f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                        0.027170017f : 
                        0.030328713f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.03678358f : 
                        0.040464867f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                        0.043558873f : 
                        0.04804537f) : 
                    0.056031276f))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00010000 00000000 00000100 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 8, 0, 32, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11101111 01111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -2, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000000 00000000 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 0, 0, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {00100000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11110111 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111001 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT17 = new byte[] {-97, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
  // {00000100 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT18 = new byte[] {32, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_13_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.051246475f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.048341483f : 
                        -0.044780552f)) : 
                -0.03884479f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.029468281f : 
                    -0.018576082f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.011464837f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.009652316f : 
                        -0.008034758f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -4.0912628E-4f : 
                    0.005327487f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.013215897f : 
                    0.01733756f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                        0.024453023f : 
                        0.027295837f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.03310521f : 
                        0.03641838f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                    0.03966838f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                        0.047253005f : 
                        0.050428152f)))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -17, -1, -5, 1};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111011 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -33, -1, 1};
  // {11110111 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111001 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT17 = new byte[] {-97, -1, -1, -1, -2, -1, -1, -1, -1, -1, 1};
  // {11111110 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {127, -1, -1, -65, -1, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_14_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.04612183f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.043507338f : 
                        -0.040302496f)) : 
                -0.03496031f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.02652145f : 
                    -0.016718479f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.010318354f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.008687092f : 
                        -0.007231288f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -3.6821366E-4f : 
                    0.005916397f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.013578072f : 
                    0.015936932f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                        0.022007732f : 
                        0.025235174f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.031275854f : 
                        0.03408919f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                    0.0388656f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                        0.04538534f : 
                        0.04551235f)))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -17, -1, -5, 1};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000000 00000000 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 0, 0, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {00100000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11110101 11111111 11111111 10111110 01111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-81, -1, -1, 125, -2, -71, -51, 63, -1, -4, 1};
  // {00000010 00000000 00000000 00000000 10000000 00100000 01001100 00000001 00000000 00000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {64, 0, 0, 0, 1, 4, 50, -128, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 10000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 1, 0};
  // {00000010 00000000 00000000 00000000 10000000 00100000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {64, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT17 = new byte[] {-33, -1, -1, -65, -1, -1, -1, -1, -1, -1, 1};
  // {00000001 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000010 00010110 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-128, 0, 0, 0, 0, 0, 0, 8, 64, 104, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_15_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.041509647f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.039156605f : 
                        -0.036272243f)) : 
                -0.03146428f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.023869306f : 
                    -0.015585613f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.01018756f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.007818376f : 
                        -0.0065081646f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -3.3140182E-4f : 
                    0.0053247614f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.012220254f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.014279602f : 
                        0.01540259f))) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.020871464f : 
                        0.023334563f) : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.028885998f : 
                        0.032141805f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                    0.038028978f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 81, 0, data[0])) ? 
                        0.04084408f : 
                        0.04094059f)))));
    return pred;
  } // constant pool size = 322B, number of visited nodes = 20, static init size = 1440B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11101111 01111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -2, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011110 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, 123, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000000 00000001 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 0, -128, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {00100000 10000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 1, 0, -128, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -2, -1, -1, -1, -1, -1, -1, -1, -1, 1};
  // {11110001 11111111 11111111 10111111 01111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-113, -1, -1, -3, -2, -71, -51, 63, -1, -4, 1};
  // {11110111 11111111 11111111 10111111 11111111 10111101 11111111 11111101 11111111 00111111 1}
  public static final byte[] GRPSPLIT15 = new byte[] {-17, -1, -1, -3, -1, -67, -1, -65, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 10000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0};
  // {00000110 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {96, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111101 11111111 11111111 11111111 11101111 11111101 11101111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -1, -65, -1, -1, -1, -9, -65, -9, 1};
  // {00000001 00000000 00000000 00000000 00000000 00010001 10000000 00100000 00000000 00000000 0}
  public static final byte[] GRPSPLIT19 = new byte[] {-128, 0, 0, 0, 0, -120, 1, 4, 0, 0, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_16_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.03735868f : 
                        -0.03524094f) : 
                    -0.03252567f) : 
                -0.026344897f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.017537475f : 
                    -0.013207343f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.008267763f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.0070365397f : 
                        -0.005857353f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -2.9826164E-4f : 
                    0.003670621f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.009699822f : 
                    0.012608135f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                        0.017921304f : 
                        0.019812578f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.024181718f : 
                        0.02695114f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                    0.030784119f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                        0.036753476f : 
                        0.036886595f)))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 16, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 16, 0, 0, -128, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111011 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -33, -1, 1};
  // {11110101 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-81, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000010 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {64, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000010 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {64, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT17 = new byte[] {-33, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
  // {00000001 00000000 00000000 00001000 00110000 00000000 00000000 00010000 00000010 00010000 0}
  public static final byte[] GRPSPLIT18 = new byte[] {-128, 0, 0, 16, 12, 0, 0, 8, 64, 8, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_17_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.033622812f : 
                        -0.031716846f) : 
                    -0.029273104f) : 
                -0.024808414f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.01928826f : 
                    -0.012174257f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.0074409842f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.006332885f : 
                        -0.0052716173f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -2.6843548E-4f : 
                    0.0038375389f) : 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.009551553f : 
                    0.011576498f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                        0.016129185f : 
                        0.01783132f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.021763558f : 
                        0.023887066f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                    0.026010608f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                        0.031509608f : 
                        0.033162802f)))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -17, -1, -5, 1};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 32, 0, 0};
  // {00100000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11110111 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111001 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT17 = new byte[] {-97, -1, -1, -1, -2, -1, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11110101 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -1, -81, -1, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_18_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.030260533f : 
                        -0.028545162f) : 
                    -0.026345795f) : 
                -0.022327574f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.01735943f : 
                    -0.0113625955f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.0073561156f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        -0.0056995978f : 
                        -0.0047444524f)))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    -2.4158954E-4f : 
                    0.003732978f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.0089961225f : 
                    0.0104188565f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                        0.014516259f : 
                        0.016048187f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.0195872f : 
                        0.02149835f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                    0.023409557f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                        0.02768346f : 
                        0.029876163f)))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11101111 01111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -2, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000000 00000000 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {5, 1, 0, 0, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {00100000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11110111 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111001 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT17 = new byte[] {-97, -1, -1, -1, -2, -1, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11111101 11001111 11111111 11111111 11111111 11111111 11111011 1}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -1, -65, -13, -1, -1, -1, -1, -33, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_19_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.02723448f : 
                        -0.025690645f) : 
                    -0.023711216f) : 
                -0.020094816f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.01562349f : 
                    -0.009900705f) : 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.005645827f : 
                    -0.00427001f))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    -2.1743774E-4f : 
                    0.002546501f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    0.007098432f : 
                    0.009216756f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                        0.013448477f : 
                        0.0152675845f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                        0.018418552f : 
                        0.020201948f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                    0.022901203f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.026774516f : 
                        0.026993517f)))));
    return pred;
  } // constant pool size = 290B, number of visited nodes = 18, static init size = 1296B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111011 11111111 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -33, -1, 1};
  // {11110101 11111111 11111111 10111110 01111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-81, -1, -1, 125, -2, -71, -51, 63, -1, -4, 1};
  // {00000010 00000000 00000000 00000000 10000000 00100000 01001100 00000001 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {64, 0, 0, 0, 1, 4, 50, -128, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 10000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0};
  // {00000010 00000000 00000000 00000000 10000000 00100000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT16 = new byte[] {-33, -1, -1, -65, -1, -1, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11101111 11111111 11101110 01111111 11011111 11111111 11111101 0}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -1, -1, -9, -1, 119, -2, -5, -1, -65, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_20_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.024511032f : 
                        -0.02312158f) : 
                    -0.021340095f) : 
                -0.018085333f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.014061141f : 
                    -0.0092362715f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.00594954f : 
                    -0.0040992177f))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    -1.9569397E-4f : 
                    0.002941163f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    0.0073306044f : 
                    0.008455289f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                        0.011719775f : 
                        0.012992893f) : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                        0.016179891f : 
                        0.017753042f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                    0.018963162f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.022824809f : 
                        0.02423719f)))));
    return pred;
  } // constant pool size = 290B, number of visited nodes = 18, static init size = 1296B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11101111 01111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -2, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000000 00000000 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {5, 1, 0, 0, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {00100000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11110111 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0};
  // {11111001 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT16 = new byte[] {-97, -1, -1, -1, -2, -1, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11111101 11111111 11101111 11111111 11111111 11111111 11111101 0}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -1, -1, -65, -1, -9, -1, -1, -1, -65, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_21_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.022059929f : 
                        -0.020809423f) : 
                    -0.019206086f) : 
                -0.016276795f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.012655031f : 
                    -0.00805275f) : 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.00455647f : 
                    -0.0034330892f))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    -1.7611981E-4f : 
                    0.00264705f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    0.0065975385f : 
                    0.007609761f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                        0.010879937f : 
                        0.012343478f) : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                        0.014958718f : 
                        0.015977731f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.016912026f : 
                        0.018506827f) : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                        0.021764284f : 
                        0.021911308f)))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000000 00000000 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {5, 1, 0, 0, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {00100000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11110111 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 0, 0, 0, 4, 50, -128, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 10000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0};
  // {00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0};
  // {11111001 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT16 = new byte[] {-97, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
  // {00000100 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {32, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0};
  // {00000001 00000000 00000000 00000000 00110000 00000000 00000000 00010000 00000010 00010100 0}
  public static final byte[] GRPSPLIT18 = new byte[] {-128, 0, 0, 0, 12, 0, 0, 8, 64, 40, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_22_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.019853937f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.018728482f : 
                        -0.017404828f)) : 
                -0.015071028f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.011389527f : 
                    -0.0075073787f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.004811545f : 
                    -0.003306125f))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    -1.5850067E-4f : 
                    0.0023823339f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    0.005937787f : 
                    0.0072126817f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                        0.009990105f : 
                        0.011109138f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                        0.013462856f : 
                        0.01485263f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                    0.01829126f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.01961084f : 
                        0.01972017f)))));
    return pred;
  } // constant pool size = 290B, number of visited nodes = 18, static init size = 1296B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11101111 01111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -2, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011110 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-6, -36, -115, 123, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000000 00000001 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {5, 1, 0, -128, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {00100000 10000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 1, 0, -128, 0, 0, 0, 0, 0, 0, 0};
  // {11110001 11111111 11111111 10111111 01111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-113, -1, -1, -3, -2, -71, -51, 63, -1, -4, 1};
  // {11110111 11111111 11111111 10111111 11111111 10111101 11111111 11111101 11111111 00111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-17, -1, -1, -3, -1, -67, -1, -65, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 10000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0};
  // {00000110 00000000 00000000 00000000 10000000 00100000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {96, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111101 11111111 11111110 01111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -1, -1, -65, -1, 127, -2, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11100111 11111111 11101111 11111111 11011111 11111111 11111101 0}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -1, -1, -25, -1, -9, -1, -5, -1, -65, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_23_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.017868543f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.016855633f : 
                        -0.015603341f)) : 
                -0.013142014f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.010250575f : 
                    -0.006550662f) : 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.0036767763f : 
                    -0.002759162f))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    -1.4264583E-4f : 
                    0.0014947891f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    0.004716868f : 
                    0.006035536f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                        0.008563115f : 
                        0.009456646f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                        0.011608926f : 
                        0.012681386f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 81, 0, data[0])) ? 
                        0.013735575f : 
                        0.014985737f) : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 81, 0, data[0])) ? 
                        0.017653162f : 
                        0.017748162f)))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 19, static init size = 1368B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, 1};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111011 11111111 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -33, -1, 1};
  // {11110111 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 00000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00100000 00000100 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 0, 0, 0, 4, 32, 0, 0, 0, 0};
  // {11111001 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT16 = new byte[] {-97, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
  // {00000100 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT17 = new byte[] {32, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0};
  // {00000001 00000000 00000000 00000000 00110000 00000000 00000000 00010000 00000010 00010100 0}
  public static final byte[] GRPSPLIT18 = new byte[] {-128, 0, 0, 0, 12, 0, 0, 8, 64, 40, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_24_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.016081687f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.01517007f : 
                        -0.014043005f)) : 
                -0.011355064f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.0076510017f : 
                    -0.005668749f) : 
                -0.0029720163f)) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                    -1.283884E-4f : 
                    0.0013453007f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    0.004245181f : 
                    0.0054319794f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.007961069f : 
                        0.008986341f) : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                        0.011212732f : 
                        0.012427004f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                    0.0147254085f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.015907586f : 
                        0.015973352f)))));
    return pred;
  } // constant pool size = 274B, number of visited nodes = 17, static init size = 1224B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 16, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, 1};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 16, 0, 0, -128, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111011 11111111 1}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -33, -1, -1, -1, -5, -1, -33, -1, 1};
  // {00000001 00000000 00000000 00011010 00110000 00010001 10000000 00110000 00000010 00010110 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-128, 0, 0, 88, 12, -120, 1, 12, 64, 104, 1};
  // {00000110 00000000 00000000 00000000 10000000 00100000 01001100 00000001 00000000 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {96, 0, 0, 0, 1, 4, 50, -128, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 10000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 0, 0, 0, 64, 0, 0, 0, 1, 0};
  // {00000110 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {96, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11101101 11111111 11111111 11111111 11011111 11111111 11111111 1}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -1, -1, -73, -1, -1, -1, -5, -1, -1, 1};
  // {11111111 11111111 11111111 11110111 11111111 11101110 01111111 11111111 11111111 11111101 0}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -1, -1, -17, -1, 119, -2, -1, -1, -65, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_25_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.014473518f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.013653063f : 
                        -0.012638705f)) : 
                -0.0106923105f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.008275219f : 
                    -0.005476889f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.003526249f : 
                    -0.0023698283f))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    -1.15537645E-4f : 
                    0.0016396904f) : 
                0.0046896813f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.0069107083f : 
                        0.007904002f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                        0.00978903f : 
                        0.010844789f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                    0.013252864f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 81, 0, data[0])) ? 
                        0.014316833f : 
                        0.014376018f)))));
    return pred;
  } // constant pool size = 274B, number of visited nodes = 17, static init size = 1224B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, 1};
  // {11111111 11111111 11101111 01111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -2, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000000 00000000 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {5, 1, 0, 0, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {00000001 00000000 00000000 00011010 00110000 00010001 10000000 00110000 00000010 00010110 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-128, 0, 0, 88, 12, -120, 1, 12, 64, 104, 1};
  // {00000110 00000000 00000000 00000000 10000000 00100000 01001100 00000001 00000000 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {96, 0, 0, 0, 1, 4, 50, -128, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000010 00000000 10000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 0, 0, 0, 64, 0, 64, 0, 1, 0};
  // {00000110 00000000 00000000 00000000 10000000 00100000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {96, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11101101 11111111 11111111 11111111 11011111 11111111 11111111 1}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -1, -1, -73, -1, -1, -1, -5, -1, -1, 1};
  // {11111111 11111111 11111111 11110111 11111111 11101110 01111111 11111111 11111111 11111101 0}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -1, -1, -17, -1, 119, -2, -1, -1, -65, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_26_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.013026168f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.012287756f : 
                        -0.011374834f)) : 
                -0.009623082f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.0074476926f : 
                    -0.0047737965f) : 
                -0.00239535f)) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                    -1.03974344E-4f : 
                    0.00147573f) : 
                0.004220712f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    0.0066197254f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                        0.008637658f : 
                        0.009563967f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                    0.010722577f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                        0.012886384f : 
                        0.012963848f)))));
    return pred;
  } // constant pool size = 242B, number of visited nodes = 15, static init size = 1080B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, 1};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -17, -1, -5, 1};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000000 00000000 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {5, 1, 0, 0, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {11110101 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT10 = new byte[] {-81, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000010 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {64, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {00000010 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {64, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0};
  // {11111011 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-33, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
  // {00000001 00000000 00000000 00010000 00000000 00000000 00000000 00110000 00000010 00010000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {-128, 0, 0, 8, 0, 0, 0, 12, 64, 8, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_27_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.01172355f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.0110589815f : 
                        -0.010237351f)) : 
                -0.008660769f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.006702921f : 
                    -0.004296411f) : 
                -0.002155809f)) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                    -9.357929E-5f : 
                    0.0013281489f) : 
                0.003940352f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    0.0062371045f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                        0.0081651f : 
                        0.0090763485f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                    0.010836105f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                        0.011599591f : 
                        0.011667471f)))));
    return pred;
  } // constant pool size = 242B, number of visited nodes = 15, static init size = 1080B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, 1};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -17, -1, -5, 1};
  // {01011111 00111011 10110001 11011110 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-6, -36, -115, 123, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000000 00000001 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {5, 1, 0, -128, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {11110001 11111111 11111111 10111111 01111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT10 = new byte[] {-113, -1, -1, -3, -2, -71, -51, 63, -1, -4, 1};
  // {11110111 11111111 11111111 10111111 11111111 10111101 11111111 11111101 11111111 00111111 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-17, -1, -1, -3, -1, -67, -1, -65, -1, -4, 1};
  // {00000110 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {96, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111101 11111111 11111110 01111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -1, -1, -65, -1, 127, -2, -1, -1, -1, 1};
  // {00000001 00000000 00000000 00010000 00000000 00000000 00000000 00110000 00000010 00010000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {-128, 0, 0, 8, 0, 0, 0, 12, 64, 8, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_28_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.010551196f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.009953083f : 
                        -0.009213617f)) : 
                -0.0077946903f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.006032631f : 
                    -0.0040221782f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -0.0026055286f : 
                    -0.0016777231f))) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    -8.4209445E-5f : 
                    7.663965E-4f) : 
                0.0032397867f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.0053662066f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.007002746f : 
                        0.007908311f)) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                    0.0099494485f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 81, 0, data[0])) ? 
                        0.010453189f : 
                        0.010508707f)))));
    return pred;
  } // constant pool size = 258B, number of visited nodes = 16, static init size = 1152B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, 1};
  // {11111111 11111111 11101111 01111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -2, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {00000001 00000000 00000000 00011010 00110000 00010001 10000000 00110000 00000010 00010110 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-128, 0, 0, 88, 12, -120, 1, 12, 64, 104, 1};
  // {11110111 11111111 11111111 10111110 11111111 10111101 11111111 11111101 11111111 10111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, -1, -1, 125, -1, -67, -1, -65, -1, -3, 1};
  // {00000110 00000000 00000000 00000000 10000000 00100000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {96, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11110101 11111111 11111111 11111111 11111111 11111111 11111101 0}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -1, -1, -81, -1, -1, -1, -1, -1, -65, 0};
  // {00000001 00000000 00000000 00010000 00000000 00000001 10000000 00100000 00000000 00000000 0}
  public static final byte[] GRPSPLIT15 = new byte[] {-128, 0, 0, 8, 0, -128, 1, 4, 0, 0, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_29_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.009496076f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.008957774f : 
                        -0.008292254f)) : 
                -0.007015224f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.00542937f : 
                    -0.0034928883f) : 
                -0.0017383741f)) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                    -7.5793265E-5f : 
                    0.0010296336f) : 
                0.003080618f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    0.004829574f : 
                    0.0065012863f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.007343718f : 
                        0.007971104f) : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                        0.009407866f : 
                        0.009451129f)))));
    return pred;
  } // constant pool size = 242B, number of visited nodes = 15, static init size = 1080B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, 1};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -17, -1, -5, 1};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000000 00000000 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {5, 1, 0, 0, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {11110111 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT10 = new byte[] {-17, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {11111001 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-97, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
  // {00000000 00000000 00000000 00000010 10000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11001111 11101111 11111111 11101111 11111101 11101011 1}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -1, -1, -1, -13, -9, -1, -9, -65, -41, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_30_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.008546469f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.008061997f : 
                        -0.0074630287f)) : 
                -0.0060530533f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.0041338913f : 
                    -0.0029835084f) : 
                -0.0015645293f)) : 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                    -6.821156E-5f : 
                    9.2666055E-4f) : 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    0.0027725573f : 
                    0.0039989734f)) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.004699076f : 
                    0.0061579803f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                    0.007865491f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 81, 0, data[0])) ? 
                        0.008489119f : 
                        0.008512714f)))));
    return pred;
  } // constant pool size = 242B, number of visited nodes = 15, static init size = 1080B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 16, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, 1};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 16, 0, 0, -128, 0, 0};
  // {01010111 00111011 10110001 10011110 10111011 00111111 11011111 11111011 11101011 10110111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-22, -36, -115, 121, -35, -4, -5, -33, -41, -19, 1};
  // {10101000 10000000 00000000 01000001 00000000 01000000 00100000 00000000 00010000 01001000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {21, 1, 0, -126, 0, 2, 4, 0, 8, 18, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {00001000 00000000 00000000 01000001 00000000 01000000 00000000 00000000 00000000 01000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, -126, 0, 2, 0, 0, 0, 2, 0};
  // {11111001 11111111 11111111 11111111 01111111 11011101 10110011 11111100 11111111 01111111 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-97, -1, -1, -1, -2, -69, -51, 63, -1, -2, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111101 11111111 01111111 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -1, -1, -1, -65, -1, -65, -1, -2, 1};
  // {11111111 11111111 11111111 11111101 11111111 11101111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -1, -1, -65, -1, -9, -1, -1, -1, -1, 1};
  // {00000001 00000000 00000000 00010000 00000000 00000001 10000000 00100000 00000000 00000000 0}
  public static final byte[] GRPSPLIT14 = new byte[] {-128, 0, 0, 8, 0, -128, 1, 4, 0, 0, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_31_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.0076918215f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.0072557977f : 
                        -0.0067777326f)) : 
                -0.005861234f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.004377081f : 
                    -0.0029387833f) : 
                -0.00150941f)) : 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                    -6.1392784E-5f : 
                    8.3398726E-4f) : 
                0.0027309374f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    0.004229177f : 
                    0.0055421926f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                    0.0070029376f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 81, 0, data[0])) ? 
                        0.0076478166f : 
                        0.0076629464f)))));
    return pred;
  } // constant pool size = 226B, number of visited nodes = 14, static init size = 1008B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11101111 01111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -2, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0};
  // {01010111 00111011 10110001 10011110 10111011 00111111 11011111 11111011 11101011 10110111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-22, -36, -115, 121, -35, -4, -5, -33, -41, -19, 1};
  // {10101000 10000000 00000000 01000001 00000000 01000000 00100000 00000000 00010000 01001000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {21, 1, 0, -126, 0, 2, 4, 0, 8, 18, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {11111001 11111111 11111111 11111111 01111111 11011101 10110011 11111100 11111111 01111111 1}
  public static final byte[] GRPSPLIT10 = new byte[] {-97, -1, -1, -1, -2, -69, -51, 63, -1, -2, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111101 11111111 01111111 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -1, -1, -1, -1, -65, -1, -65, -1, -2, 1};
  // {11111111 11111111 11111111 11111101 11001111 11111111 11111111 11111111 11111111 11111011 1}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -1, -65, -13, -1, -1, -1, -1, -33, 1};
  // {00000001 00000000 00000000 00010000 00000000 00010001 10000000 00100000 00000000 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {-128, 0, 0, 8, 0, -120, 1, 4, 0, 0, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_32_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.006922639f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.0065302183f : 
                        -0.0060618646f)) : 
                -0.0051222756f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.003939375f : 
                    -0.0025531277f) : 
                -0.0012571401f)) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                1.03361046E-4f : 
                0.0021234003f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    0.003537336f : 
                    0.0047229943f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    0.005614642f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                        0.00688694f : 
                        0.006903582f)))));
    return pred;
  } // constant pool size = 210B, number of visited nodes = 13, static init size = 936B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, 1};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -17, -1, -5, 1};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {11110111 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-17, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {11111001 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-97, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
  // {00000000 00000000 00000000 00010000 00110000 00010000 00000000 00100000 00000000 00000100 0}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 0, 8, 12, 8, 0, 4, 0, 32, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_33_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.0062303753f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.0058771963f : 
                        -0.005455679f)) : 
                -0.0046100453f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    -0.0035454337f : 
                    -0.0023895954f) : 
                -0.0012186115f)) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                9.301368E-5f : 
                0.0019110646f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    0.0031835942f : 
                    0.004250687f) : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                    0.0050531663f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 81, 0, data[0])) ? 
                        0.006194345f : 
                        0.0062091616f)))));
    return pred;
  } // constant pool size = 210B, number of visited nodes = 13, static init size = 936B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, 1};
  // {11111111 11111111 11101111 01111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -2, -17, -1, -1, -17, -1, -5, 1};
  // {00000000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -33, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {11110111 11111111 11111111 10111110 11111111 10011101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-17, -1, -1, 125, -1, -71, -51, 63, -1, -4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00100000 01001100 00000001 00000000 10000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 0, 0, 0, 4, 50, -128, 0, 1, 0};
  // {11111001 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-97, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11110111 11111111 11111111 11111111 11101111 11111101 11101101 0}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -1, -17, -1, -1, -1, -9, -65, -73, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_34_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.0056073377f : 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.005289477f : 
                        -0.004910112f)) : 
                -0.0041490393f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                -0.0029246004f : 
                -0.0015906421f)) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                    -5.973518E-4f : 
                    8.371536E-5f) : 
                0.0017199483f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                0.0031829462f : 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    0.0042648655f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                        0.0051545356f : 
                        0.005584167f)))));
    return pred;
  } // constant pool size = 194B, number of visited nodes = 12, static init size = 864B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 10110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -19, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 01001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 18, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -5, -1, 1};
  // {11111111 11111111 11111111 01111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -2, -17, -1, -1, -17, -1, -5, 1};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 01111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -34, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -2, -1, -1, 1};
  // {11110111 11111111 11111111 10111110 11111111 10111101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-17, -1, -1, 125, -1, -67, -51, 63, -1, -4, 1};
  // {11111001 11111111 11111111 11111111 01111111 11011111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT10 = new byte[] {-97, -1, -1, -1, -2, -5, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11111101 11111111 11111111 11111111 11101111 11111101 11101111 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -1, -1, -65, -1, -1, -1, -9, -65, -9, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_35_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.0050466037f : 
                    -0.0046695285f) : 
                -0.0038398178f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                -0.002632144f : 
                -0.0014315803f)) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    -5.376148E-4f : 
                    7.534686E-5f) : 
                0.0015479531f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                0.0028646574f : 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                    0.0038383822f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                        0.0047737793f : 
                        0.005033587f)))));
    return pred;
  } // constant pool size = 178B, number of visited nodes = 11, static init size = 792B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 10110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -19, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 01001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 18, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {11111111 11111111 11111111 01111111 11110111 11111111 11111111 11110111 11111111 11011111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -2, -17, -1, -1, -17, -1, -5, 1};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 01111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -34, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -2, -1, -1, 1};
  // {11110111 11111111 11111111 10111110 11111111 10111101 10110011 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-17, -1, -1, 125, -1, -67, -51, 63, -1, -4, 1};
  // {11111001 11111111 11111111 11111111 01111111 11011111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-97, -1, -1, -1, -2, -5, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11110101 11111111 11111111 11111111 11111111 11111111 11111101 0}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -1, -81, -1, -1, -1, -1, -1, -65, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_36_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.004541944f : 
                        -0.004293575f) : 
                    -0.0039728917f) : 
                -0.0033501582f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                -0.002061405f : 
                -0.0010799163f)) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                    -2.449461E-4f : 
                    4.6494676E-4f) : 
                0.0014919635f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                0.0024782103f : 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                    0.00340678f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 81, 0, data[0])) ? 
                        0.0041785827f : 
                        0.004535111f)))));
    return pred;
  } // constant pool size = 194B, number of visited nodes = 12, static init size = 864B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 10110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -19, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 01001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 18, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00001100 00000000 01000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 48, 0, 2, -128, 0, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 01111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -34, -41, -17, 1};
  // {10100000 10000000 00000000 00000000 00000000 00000000 00100000 00000000 00010000 00001000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {5, 1, 0, 0, 0, 0, 4, 0, 8, 16, 0};
  // {00000000 00000000 00000100 00000000 00000000 10000000 00000000 00000000 00000100 00000000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 32, 0, 0, 1, 0, 0, 32, 0, 0};
  // {11110111 11111111 11111111 10111110 11111111 10111101 10110111 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-17, -1, -1, 125, -1, -67, -19, 63, -1, -4, 1};
  // {11111001 11111111 11111111 11111111 01111111 11011111 11111011 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT10 = new byte[] {-97, -1, -1, -1, -2, -5, -33, -1, -1, -1, 1};
  // {11111110 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT11 = new byte[] {127, -1, -1, -65, -1, -1, -1, -1, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_37_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.004087749f : 
                        -0.0038642175f) : 
                    -0.0035756028f) : 
                -0.0029141912f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                -0.001664367f : 
                -7.104616E-4f)) : 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                1.5009301E-4f : 
                0.001514932f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                0.0028058707f : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                    0.003748081f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 81, 0, data[0])) ? 
                        0.00407842f : 
                        0.004094248f)))));
    return pred;
  } // constant pool size = 178B, number of visited nodes = 11, static init size = 792B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 19, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00001000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 16, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {00010000 00000000 00000000 00000000 00000000 00000100 00000000 11000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0, 0, 32, 0, 3, 0, 0, 0};
  // {01010111 00111011 10110001 10011110 10111011 00111111 11011111 11111001 11101011 10110111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-22, -36, -115, 121, -35, -4, -5, -97, -41, -19, 1};
  // {10101000 10000000 00000000 01000001 00000000 01000000 00100000 00000010 00010000 01001000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {21, 1, 0, -126, 0, 2, 4, 64, 8, 18, 0};
  // {11111001 11111111 11111111 11111111 01111111 11011101 10110011 11111110 11111111 01111111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-97, -1, -1, -1, -2, -69, -51, 127, -1, -2, 1};
  // {11111111 11111111 11111111 11111101 11111111 11111110 01111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -1, -65, -1, 127, -2, -1, -1, -1, 1};
  // {00000001 00000000 00000000 00001000 00000000 00000000 00000000 00010000 00000010 00010000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {-128, 0, 0, 16, 0, 0, 0, 8, 64, 8, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_38_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                     (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                        -0.0036789742f : 
                        -0.0034777964f) : 
                    -0.0032180438f) : 
                -0.0027237253f) : 
            -0.0012817766f) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                -2.0172409E-4f : 
                6.7983E-4f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                0.0017300771f : 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                    0.0027139757f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 81, 0, data[0])) ? 
                        0.0033881604f : 
                        0.0036832923f)))));
    return pred;
  } // constant pool size = 162B, number of visited nodes = 10, static init size = 720B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 10110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -19, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00001000 00001100 00000000 01001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 16, 48, 0, 18, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0};
  // {01111111 10111011 10110001 11011111 10111011 01111111 11011111 01111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-2, -35, -115, -5, -35, -2, -5, -34, -41, -17, 1};
  // {10000000 00000000 00000100 00000000 00000000 10000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 32, 0, 0, 1, 4, 0, 40, 16, 0};
  // {11010111 01111111 11111111 10111110 11111111 10111101 11111111 11111101 11111111 00111111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-21, -2, -1, 125, -1, -67, -1, -65, -1, -4, 1};
  // {11111001 11111111 11111111 11111111 01111111 11011111 10110011 11111110 11111111 11111111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-97, -1, -1, -1, -2, -5, -51, 127, -1, -1, 1};
  // {11111111 11111111 11111111 11111101 11111111 11101111 11111111 11011111 11111111 11111111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -1, -65, -1, -9, -1, -5, -1, -1, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_39_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
                    -0.0032308602f : 
                    -0.002896238f) : 
                -0.0023174505f) : 
            -8.15251E-4f) : 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                1.1589314E-4f : 
                0.0011562908f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                0.002141703f : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                    0.0028009745f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 81, 0, data[0])) ? 
                        0.0033076662f : 
                        0.0033249154f)))));
    return pred;
  } // constant pool size = 146B, number of visited nodes = 9, static init size = 648B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 3, -128, 0, 0};
  // {00000000 00000000 00000000 00000100 00001000 00000000 00000000 00001000 00000000 00100000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 16, 0, 0, 16, 0, 4, 0};
  // {00000000 00010000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0};
  // {01010111 00111011 10110001 10011110 10111011 00111111 11011111 11111011 11101011 10110111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-22, -36, -115, 121, -35, -4, -5, -33, -41, -19, 1};
  // {10101000 10000000 00000000 01000001 00000000 01000000 00100000 00000000 00010000 01001000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {21, 1, 0, -126, 0, 2, 4, 0, 8, 18, 0};
  // {11111101 11111111 11111111 11111111 11111111 11011101 10110011 11111100 11111111 01111111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-65, -1, -1, -1, -1, -69, -51, 63, -1, -2, 1};
  // {11111011 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-33, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11100111 11001111 11111111 11111111 11111111 11111111 11111001 0}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -25, -13, -1, -1, -1, -1, -97, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_40_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                -0.0028469334f : 
                -0.0022196055f) : 
            -0.0011607832f) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
            1.5886608E-4f : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                0.0013514325f : 
                 (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                    0.0022192735f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                        0.002976908f : 
                        0.002992417f)))));
    return pred;
  } // constant pool size = 114B, number of visited nodes = 7, static init size = 504B
  // {10111111 11000100 01001110 01111011 11110100 11110011 11101100 10110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-3, 35, 114, -34, 47, -49, 55, -19, 104, 123, 1};
  // {00000000 00000000 00010000 10000000 00001000 00001100 00000000 01001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 8, 1, 16, 48, 0, 18, -128, 4, 0};
  // {00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {01101111 10111011 10110001 11011111 10111011 01111111 11011111 01111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-10, -35, -115, -5, -35, -2, -5, -34, -41, -17, 1};
  // {11010111 01111111 11111111 10111110 11111111 10111101 11111111 11111101 11111111 10111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-21, -2, -1, 125, -1, -67, -1, -65, -1, -3, 1};
  // {11111001 11111111 11111111 11111101 01111111 11011111 10110011 11111110 11111111 01111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-97, -1, -1, -65, -2, -5, -51, 127, -1, -2, 1};
  // {11111111 11111111 11111111 11100111 11001111 11111111 11111111 11111111 11111111 11111001 0}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -25, -13, -1, -1, -1, -1, -97, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_41_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                -0.0025622407f : 
                -0.0019011182f) : 
            -6.6943275E-4f) : 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                8.8427325E-5f : 
                9.5108093E-4f) : 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                0.0016963803f : 
                 (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 81, 0, data[0])) ? 
                    0.0022496893f : 
                     (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 81, 0, data[0])) ? 
                        0.0026792185f : 
                        0.0026931777f)))));
    return pred;
  } // constant pool size = 130B, number of visited nodes = 8, static init size = 576B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 3, -128, 0, 0};
  // {00000000 00000000 00000000 00000100 00001000 00000000 00000000 00001000 00000000 00100000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 16, 0, 0, 16, 0, 4, 0};
  // {01010111 00111011 10110001 10011110 10111011 00111111 11011111 11111011 11101011 10110111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-22, -36, -115, 121, -35, -4, -5, -33, -41, -19, 1};
  // {10101000 10000000 00000000 01000001 00000000 01000000 00100000 00000000 00010000 01001000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {21, 1, 0, -126, 0, 2, 4, 0, 8, 18, 0};
  // {11111111 11111111 11111111 11111111 11111111 11011101 10110011 11111100 11111111 01111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -69, -51, 63, -1, -2, 1};
  // {11111001 11111111 11111111 11111101 01111111 11111111 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-97, -1, -1, -65, -2, -1, -1, -1, -1, -1, 1};
  // {11111111 11111111 11111111 11100111 11001111 11111111 11111111 11111111 11111111 11111001 0}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -25, -13, -1, -1, -1, -1, -97, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_42_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                -0.0023215683f : 
                -0.0017498079f) : 
            -7.2686974E-4f) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                -6.54249E-5f : 
                7.4458966E-4f) : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 81, 0, data[0])) ? 
                0.001311942f : 
                0.002083092f)));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 6, static init size = 432B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 10110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -19, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 01000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 2, -128, 0, 0};
  // {00000000 00000000 00000000 00000100 00001010 00000000 00000000 00001000 00000000 00100000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 32, 80, 0, 0, 16, 0, 4, 0};
  // {01011111 00111011 10110001 11011111 10111011 01111111 11011111 01111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-6, -36, -115, -5, -35, -2, -5, -34, -41, -17, 1};
  // {10100000 10000000 00000100 00000000 00000000 00000000 00100000 00000000 00010100 00001000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {5, 1, 32, 0, 0, 0, 4, 0, 40, 16, 0};
  // {11110111 11111111 11111111 10111110 11111111 10111101 10110111 11111100 11111111 00111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, -1, -1, 125, -1, -67, -19, 63, -1, -4, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_43_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
             (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
                -0.0021347003f : 
                -0.0016946238f) : 
            -7.987069E-4f) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 81, 0, data[0])) ? 
            1.1308518E-4f : 
             (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 81, 0, data[0])) ? 
                9.868777E-4f : 
                0.0017849458f)));
    return pred;
  } // constant pool size = 82B, number of visited nodes = 5, static init size = 360B
  // {10111111 11000100 01001110 01111011 11110100 11110011 11101100 10110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-3, 35, 114, -34, 47, -49, 55, -19, 104, 123, 1};
  // {00000000 00000000 00010000 10000000 00000000 00001100 00000000 01001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 8, 1, 0, 48, 0, 18, -128, 4, 0};
  // {00000000 00010000 00000000 00000100 00001010 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 8, 0, 32, 80, 0, 0, 0, 0, 0, 0};
  // {01101111 10111011 10110001 11011111 10111011 01111111 11011111 01111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT3 = new byte[] {-10, -35, -115, -5, -35, -2, -5, -34, -41, -17, 1};
  // {11010111 01111111 11111111 10111110 11111111 10111101 11111111 11111101 11111111 10111111 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-21, -2, -1, 125, -1, -67, -1, -65, -1, -3, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_44_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
            -0.001746958f : 
            -3.896738E-4f) : 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
            6.903982E-4f : 
            0.0016064418f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 3, static init size = 216B
  // {10101111 10000000 00000100 01011011 10110000 11110011 11101100 00110011 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 1, 32, -38, 13, -49, 55, -52, 104, 123, 1};
  // {00010000 01000100 01011010 10100000 01000100 00001100 00000000 11000100 00000001 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 34, 90, 5, 34, 48, 0, 35, -128, 0, 0};
  // {01010111 01111111 11111011 10111110 11111111 00111101 11011111 11111101 11101011 10110111 1}
  public static final byte[] GRPSPLIT2 = new byte[] {-22, -2, -33, 125, -1, -68, -5, -65, -41, -19, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_45_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
            -0.0015722623f : 
            -4.6348723E-4f) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
            3.6911247E-4f : 
            0.0012936415f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 3, static init size = 216B
  // {10101111 11000100 01001110 01111011 11110100 11110011 11101100 00110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 35, 114, -34, 47, -49, 55, -20, 104, 123, 1};
  // {00010000 00000000 00010000 10000000 00000000 00001100 00000000 11000000 00000001 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 8, 1, 0, 48, 0, 3, -128, 0, 0};
  // {01011111 00111011 10110001 11011110 10111011 01111111 11011111 11111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT2 = new byte[] {-6, -36, -115, 123, -35, -2, -5, -33, -41, -17, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_46_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
            -0.0013897477f : 
            -2.8830604E-4f) : 
        8.8291185E-4f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 2, static init size = 144B
  // {10101111 10000000 00000100 01011011 10110000 11110011 11101100 00110011 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 1, 32, -38, 13, -49, 55, -52, 104, 123, 1};
  // {00010000 01000100 01011010 00100000 01000100 00001100 00000000 11000100 00000001 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 34, 90, 4, 34, 48, 0, 35, -128, 0, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_47_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
            -0.0014012718f : 
            -8.043129E-4f) : 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 81, 0, data[0])) ? 
            4.530382E-6f : 
            9.7216485E-4f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 3, static init size = 216B
  // {10111111 11000100 01001110 01111011 11110100 11110111 11101100 11110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-3, 35, 114, -34, 47, -17, 55, -17, 104, 123, 1};
  // {00000000 00000000 00010000 10000100 00001000 00001000 00000000 00001000 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 8, 33, 16, 16, 0, 16, -128, 4, 0};
  // {01101111 10111011 10110001 11011111 10111011 01111011 11011111 00111011 11101011 11110111 1}
  public static final byte[] GRPSPLIT2 = new byte[] {-10, -35, -115, -5, -35, -34, -5, -36, -41, -17, 1};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_48_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
         (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
            -0.0011976212f : 
            -3.1097335E-4f) : 
        7.198774E-4f);
    return pred;
  } // constant pool size = 34B, number of visited nodes = 2, static init size = 144B
  // {10101111 10000000 00000100 01011011 10110000 11110011 11101100 00110011 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-11, 1, 32, -38, 13, -49, 55, -52, 104, 123, 1};
  // {00010000 01000100 01011010 10100000 01001100 00001100 00000000 11001100 00000001 00100000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 34, 90, 5, 50, 48, 0, 51, -128, 4, 0};
}


class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_49_class_0.score0(fdata);
  }
}
class gbm_2098b885_7850_498e_b4f2_e9cf1d931ddb_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[0 /* query */]) && (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 81, 0, data[0])) ? 
        -8.815121E-4f : 
         (Double.isNaN(data[0 /* query */]) || !GenModel.bitSetIsInRange(81, 0, data[0]) || (GenModel.bitSetIsInRange(81, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 81, 0, data[0])) ? 
            2.1318905E-4f : 
            0.0010589374f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 2, static init size = 144B
  // {10111111 11000100 01001110 01111011 11110100 11110011 11101100 10110111 00010110 11011110 1}
  public static final byte[] GRPSPLIT0 = new byte[] {-3, 35, 114, -34, 47, -49, 55, -19, 104, 123, 1};
  // {00000111 00000000 00000000 00011010 10110000 00110001 11001100 00110001 00000010 10010110 1}
  public static final byte[] GRPSPLIT1 = new byte[] {-32, 0, 0, 88, 13, -116, 51, -116, 64, 105, 1};
}


